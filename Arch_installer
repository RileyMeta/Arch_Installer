#!/bin/bash

WHITE="\e[97m"
BLACK="\e[30m"
GRAY="\e[90m"	
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
LIGHT_GRAY="\e[37m"
LIGHT_RED="\e[91m"
LIGHT_GREEN="\e[92m"
LIGHT_YELLOW="\e[93m"
LIGHT_BLUE="\e[94m"
LIGHT_MAGENTA="\e[95m"
LIGHT_CYAN="\e[96m"

BOLD="\e[1m"
FAINT="\e[2m"
ITALICS="\e[3m"
UNDERLINE="\e[4m"
FLASHING="\e[5m"
FLASHING2="\e[6m"
INVISIBLE="\e[7m"
STRIKE_TRHOUGH="\e[9m"
ENDSTYLE="\e[0m"

BACKGROUND_BLACK="\e[40m"
BACKGROUND_RED="\e[41m"
BACKGROUND_GREEN="\e[42m"
BACKGROUND_YELLOW="\e[43m"
BACKGROUND_BLUE="\e[44m"
BACKGROUND_MAGENTA="\e[45m"
BACKGROUND_CYAN="\e[46m"
BACKGROUND_GRAY="\e[100m"
BACKGROUND_LIGHT_GRAY="\e[47m"
BACKGROUND_LIGHT_RED="\e[101m"
BACKGROUND_LIGHT_GREEN="\e[102m"
BACKGROUND_LIGHT_YELLOW="\e[103m"
BACKGROUND_LIGHT_BLUE="\e[104m"
BACKGROUND_LIGHT_MAGENTA="\e[105m"
BACKGROUND_LIGHT_CYAN="\e[106m"
BACKGROUND_WHITE_READABLE="\e[7m" # With Black Text
BACKGROUND_WHITE="\e[107m" # With White Text

# Default Variable Values
EDITING=false
DEVICE=""
SWAP=""
FILE_SYSTEM=""
TEXT_EDITOR=""
root_pass_set=false
AUR_WRAPPER="none"
DESKTOP=""
account_created=false
HOST_NAME=""
locale_set=false
desktop_apps_set=false

GNOME_DESKTOP_APPS=('accerciser', 'cheese', 'd-spy', 'dconf-editor', 'devhelp', 'endeavour',
'eog', 'evolution', 'file-roller', 'five-or-more', 'four-in-a-row', 'geary', 'gedit', 'ghex',
'gitg', 'glade', 'gnome-2048', 'gnome-boxes', 'gnome-builder', 'gnome-chess', 'gnome-devel-docs',
'gnome-dictionary', 'gnome-games', 'gnome-klotski', 'gnome-mahjongg', 'gnome-mines',
'gnome-multi-writer', 'gnome-nibbles', 'gnome-notes', 'gnome-photos', 'gnome-recipes',
'gnome-robots', 'gnome-sound-recorder', 'gnome-sudoku', 'gnome-taquin', 'gnome-terminal',
'gnome-tetravex', 'gnome-tweaks', 'hitori', 'iagno', 'lightsoff', 'polari', 'quadrapassel',
'seahorse', 'swell-foop', 'sysprof', 'tali'
)

main_menu() {
    clear
    prompt="Welcome to my Arch Linux installer"
    prompt+="\n\nPlease type ${LIGHT_GREEN}'next'${ENDSTYLE} to continue or ${LIGHT_RED}'quit'${ENDSTYLE} to close"
    echo -e $prompt
    while IFS= read -p "> "; do
        case ${REPLY,,} in
            next|continue|start ) init_test
                break;;
            exit|close|quit ) exit;;
            'install check'|'check'|'review' ) _install_review;;
            * ) _bad_command && main_menu;;
        esac
    done
}

init_test() {
    total_ram=$(free -m | awk '/^Mem:/{print $2}')

    if [ "$total_ram" -le 2048 ]; then
        _ram_fail
    else
        ping -c 1 google.com && disk_select || _ping_fail
    fi
}

_bad_command() {
    clear
    echo "Please input a valid command."
    sleep 1
}

_ping_fail() {
    clear
    prompt="${LIGHT_RED}${UNDERLINE}An Internet connection could not be established.${ENDSTYLE}"
    prompt+="\nThis is most likely caused by Wifi not being connected properly."
    prompt+="\n"
    prompt+="\nThe Arch Linux ISO comes with the '${BOLD}IWD${ENDSTYLE}' networking tool for Wireless Devices."
    prompt+="\nPlease use '${FAINT}iwctl device list${ENDSTYLE}' to find your wifi device's name (normally 'wlan0')"
    prompt+="\nYou can use '${FAINT}iwctl station wlan0 get-networks${ENDSTYLE}' to scan and list available networks"
    prompt+="\n"
    prompt+="\n> To connect to a network please use '${FAINT}iwctl station${ENDSTYLE} ${LIGHT_YELLOW}wlan0${ENDSTYLE} ${FAINT}connect${ENDSTYLE} ${LIGHT_YELLOW}ssid${ENDSTYLE}'"
    prompt+="\n${FAINT}(Please change the highlighted values as needed)${ENDSTYLE}"
    echo -e "$prompt"
}

_ram_fail() {
    clear
    prompt="${ENDSTYLE}Unfortunately your ${LIGHT_CYAN}${total_ram}MB${ENDSTYLE} is less than the required ${LIGHT_YELLOW}2GB${ENDSTYLE}\n"
    prompt+="\nHave a good day."
    echo -e $prompt
}

disk_select() {
    clear
    echo -e "Below are your available devices:"
    output=$(lsblk -Ald -o NAME,SIZE,RM)

    while IFS= read -r line; do
        name=$(echo "$line" | awk '{print $1}')
        size=$(echo "$line" | awk '{print $2}')
        rm=$(echo "$line" | awk '{print $3}')

        if [[ "$name" != *"SWAP"* && "$name" != *"zram0"* && "$name" != "NAME" ]]; then
            # Check if the drive is removable
            if [[ "$rm" -eq 1 ]]; then
                echo -e "$name ${FAINT}${size}${ENDSTYLE} ${BACKGROUND_WHITE_READABLE}[Removable]${ENDSTYLE}"
            else
                echo -e "$name ${FAINT}${size}${ENDSTYLE}"
            fi
        fi
    done <<< "$output"
    echo -e "\n"
    echo "Which Device would you like to install to?"
    echo -e "${LIGHT_GRAY}Please use, 'nvme1', 'nvme2, 'sda', 'sdb', etc.${ENDSTYLE}"

    while IFS= read -p "> "; do
        case ${REPLY,,} in
            nvme1 ) DEVICE="/dev/nvme0n1"
            break
            ;;
            nvme2 ) DEVICE="/dev/nvme0n2"
            break
            ;;
            sda ) DEVICE="/dev/sda"
            break
            ;;
            sdb ) DEVICE="/dev/sdb"
            break
            ;;
            sdc ) DEVICE="/dev/sdc"
            break
            ;;
            vda ) DEVICE="/dev/vda"
            break
            ;;
            vdb ) DEVICE="/dev/vdb"
            break
            ;;
            quit|q ) exit ;;
            * ) _bad_command && disk_select ;;
        esac
    done
    if [[ $EDITING != true ]]; then
        _device_confirm
    else
        _install_review
    fi
}

_device_confirm() {
    clear
    prompt="Selected Device: ${LIGHT_RED}$DEVICE${ENDSTYLE}"
    prompt+="\n"
    prompt+="\n${LIGHT_GREEN}'Continue'${ENDSTYLE} to move on and ${LIGHT_RED}'Select'${ENDSTYLE} to change your selected device"
    echo -e $prompt

    while IFS= read -p "> "; do
        case ${REPLY,,} in
            continue|confirm|next|yes|y ) swap_partition
            break;;
            select|deny|back|restart|no|n ) disk_select
            break;;
            quit|q ) exit ;;
            * ) _bad_command && _device_confirm;;
        esac
    done
}

swap_partition() { 
    clear
    total_ram=$(free -m | awk '/^Mem:/{print $2}')

    RAM=$(($total_ram / 1000))
    prompt="Available RAM: ${LIGHT_CYAN}${total_ram}MB${ENDSTYLE} or ${LIGHT_CYAN}${RAM}GB${ENDSTYLE}"
    prompt+="\n${FAINT}(Calculations done with${ENDSTYLE} 1000 ${FAINT}instead of${ENDSTYLE} 1024 ${FAINT}to ensure memory shown is accurate to user expectations.)${ENDSTYLE}"
    prompt+="\n"
    prompt+="\nWould you like to add a Swap partition?"
    prompt+="\n${LIGHT_GREEN}'[Y]es'${ENDSTYLE} or ${LIGHT_RED}'[N]o'${ENDSTYLE}"
    echo -e "$prompt"
    while IFS= read -p "> "; do
        case ${REPLY,,} in
            yes|y|'swap' ) SWAP=true
                break;;
            no|n|'no swap' ) SWAP=false
                break;;
            back|cancel ) disk_select 
                break;;
            quit|q ) exit ;;
            * ) _bad_command && swap_partition;;
        esac
    done
    if [[ $EDITING != true ]]; then
        disk_partitioning
    else
        _install_review
    fi
}

disk_partitioning() {
    clear
    prompt="${LIGHT_RED}${UNDERLINE}Disk Partitioning is Permanent and will erase all data on the device.${ENDSTYLE}"
    prompt+="\n${FAINT}Changes will not be made to the host system until the end of the script.${ENDSTYLE}"
    prompt+="\n\nThis installer is limited in it's partition design and will reserve ${LIGHT_CYAN}512MiB${ENDSTYLE} for"
    prompt+="\nthe bootloader, ${LIGHT_CYAN}2GiB${ENDSTYLE} for the Swap partition if previously enabled | ${FAINT}Swap = ${SWAP}${ENDSTYLE}"
    prompt+="\nand ${LIGHT_CYAN}the remainder${ENDSTYLE} for a combined root/home partition ${FAINT}(aka the Default Layout)${ENDSTYLE}."
    prompt+="\n"
    prompt+="\nWould you like to continue?"
    prompt+="\n${LIGHT_GREEN}'yes'${ENDSTYLE} to continue, ${LIGHT_RED}'no'${ENDSTYLE} to go back."
    echo -e $prompt

    while IFS= read -p "> "; do
        case ${REPLY,,} in
            continue|next|yes|y|y* ) choose_filesystem
                break;;
            cancel|back|no|n|n* ) swap_partition
                break;;
            exit|quit ) exit;;
            * ) swap_partition
                break;;
        esac
    done
}

choose_filesystem() {
    clear
    prompt="Linux has multiple different Filesystems that can be used, but this script only offers 2."
    prompt+="\nTo ensure the bootloader works correctly, it will use 'fat32'."
    prompt+="\n"
    prompt+="\nWould you like to use 'ext4' or 'btrfs' for your ${FAINT}root/home${ENDSTYLE} drive?"
    prompt+="\n"
    prompt+="\n${LIGHT_CYAN}'btrfs'${ENDSTYLE} or ${LIGHT_CYAN}'ext4'${ENDSTYLE}"
    echo -e $prompt

    while IFS= read -p "> "; do
        case ${REPLY,,} in
            ext|ext4 ) FILE_SYSTEM="ext4"
                break;;
            btrfs ) FILE_SYSTEM="btrfs"
                break;;
            exit|quit ) exit;;
        esac
    done
    if [[ $EDITING != true ]]; then
        _filesystem_confirm
    else
        _install_review
    fi
}

_filesystem_confirm() {
    clear
    prompt="You chose ${FILE_SYSTEM}"
    prompt+="\nIs this correct?\n${LIGHT_GREEN}[Y]es${ENDSTYLE} or ${LIGHT_RED}[N]o${ENDSTYLE}"
    echo -e "${prompt}"
    while IFS= read -p "> "; do
        case ${REPLY,,} in
            yes|y|confirm|continue|next ) text_editor && break ;;
            no|n|deny|cancel|back ) choose_filesystem && break ;;
            * ) _bad_command && _filesystem_confirm ;;
        esac
    done
}

text_editor() {
    clear
    prompt="Please choose a default text editor."
    prompt+="\nThis will be the default text editor for your console/terminal."
    prompt+="\n"
    prompt+="\nAvailable options are: ${FAINT}'Vi', 'Vim', 'NeoVim', 'Nano', 'emacs'${ENDSTYLE}"
    echo -e $prompt

    while IFS= read -p "> "; do
        case ${REPLY,,} in
            'vi' ) TEXT_EDITOR="vi"
                break;;
            'vim' ) TEXT_EDITOR="vim"
                break;;
            'neovim'|'nvim' ) TEXT_EDITOR="neovim"
                break;;
            'nano' ) TEXT_EDITOR="nano"
                break;;
            'emacs' ) TEXT_EDITOR="emacs"
                break;;
            none|skip ) TEXT_EDITOR="None"
                _text_editor_confirm
                break;;
            * ) _bad_command && text_editor;;
        esac
    done
    _text_editor_confirm
}

_text_editor_confirm() {
    clear
    if [[ $EDITING != true ]]; then
        if [[ ${TEXT_EDITOR} != "None" ]]; then
            prompt="You chose ${FAINT}${TEXT_EDITOR}${ENDSTYLE}, is this correct?"
            prompt+="\n"
            prompt+="\n${LIGHT_GREEN}[Y]es${ENDSTYLE} or ${LIGHT_RED}[N]o${ENDSTYLE}"
        else
            prompt="Are you sure you don't want to install a Text Editor?"
            prompt+="\n${FAINT}You may be unable to edit personal or system files without one.${ENDSTYLE}"
            prompt+="\n${GREEN}[Y]es${ENDSTYLE} or ${RED}[N]o${ENDSTYLE}"
        fi
        echo -e $prompt
        while IFS= read -p "> "; do
            case ${REPLY,,} in
                yes|y|confirm|continue|next ) _symlink_check && exit ;;
                no|n|deny|cancel|back ) text_editor && break ;;
            esac
        done
    else
        _symlink_check
    fi
}

_symlink_check() {
    if [[ $TEXT_EDITOR != "vi" && $TEXT_EDITOR != "vim" ]]; then
        clear
        prompt="Would you like to add a symlink from ${FAINT}${TEXT_EDITOR}${ENDSTYLE} to ${FAINT}/usr/bin/vi${ENDSTYLE}?"
        prompt+="\nThis would allow you to open apps or tools that specifically use Vi (like Visudo)"
        prompt+="\n"
        prompt+="\n${LIGHT_GREEN}[Y]es${ENDSTYLE}, ${LIGHT_RED}[N]o${ENDSTYLE} or ${FAINT}[B]ack${ENDSTYLE}"
        echo -e $prompt

        while IFS= read -p "> "; do
            case ${REPLY,,} in
                yes|y|confirm|continue|next ) SYMLINK=true
                    break;;
                no|n|deny ) SYMLINK=false
                    break ;;
                cancel|back|b ) text_editor ;;
            esac
        done
    fi
    if [[ $EDITING != true ]]; then
        root_password
    else
        _install_review
    fi
}

_bad_password() {
    clear
    echo -e "${LIGHT_RED}The passwords did not match, please try again.${ENDSTYLE}"
    sleep 2
}

root_password() {
    clear
    prompt="${LIGHT_RED}[Warning!]${ENDSTYLE} ${FAINT}This password will be stored plain-text until the end of the script.${ENDSTYLE}"
    prompt+="\nPlease set your preferred root password"
    echo -e $prompt
    IFS= read -rsp "> " ROOT_PW
    echo "Please retype:"
    IFS= read -rsp "> " ROOT_PW_CONFIRM
    if [[ $ROOT_PW_CONFIRM != $ROOT_PW ]]; then
        _bad_password && root_password
    else
        if [[ $EDITING != true ]]; then
            root_pass_set=true
            _install_review
        else
            aur_wrapper
        fi
    fi
} 

aur_wrapper() {
    clear
    prompt="Would you like to install an AUR Wrapper / Helper?"
    prompt+="\n\nAn AUR helper is a commandline tool that works to automate installing"
    prompt+="\npackages and dependencies from the Arch User Repository."
    prompt+="\n\n${FAINT}This installer is limited in it's scope, there are far more"
    prompt+="\nhelpers than those listed in this installer.${ENDSTYLE}"
    prompt+="\n"
    prompt+="\n${LIGHT_GREEN}'yay'${ENDSTYLE}, ${LIGHT_GREEN}'paru'${ENDSTYLE} or ${LIGHT_RED}'none'${ENDSTYLE}"
    echo -e $prompt
    while IFS= read -p "> "; do
        case ${REPLY,,} in
            yay ) AUR_WRAPPER="yay"
            break;;
            paru ) AUR_WRAPPER="paru"
            break;;
            none|skip|next|no ) AUR_WRAPPER="none"
            break;;
        esac
    done
    if [[ $EDITING != true ]]; then
        _aur_confirm
    else
        _install_review
    fi
}

_aur_confirm() { 
    prompt="You chose to install ${AUR_WRAPPER}"
    prompt+="\nIs this correct?"
    prompt+="\n"
    prompt+="\n${LIGHT_GREEN}[Y]es${ENDSTYLE} or ${LIGHT_RED}[N]o${ENDSTYLE}"
    echo -e $prompt
    while IFS= read -p "> "; do
        case ${REPLY,,} in
            yes|y|confirm|continue|next ) exit
                break;;
            no|n|deny|back ) aur_wrapper
                break ;;
            exit|quit ) exit 0 ;;
            * ) _bad_command ;;
        esac
    done
}

choose_desktop() { 
    clear
    prompt="Choose a Desktop Environment"
    prompt+="\nCurrently this installer is limited to 'Gnome' and 'Gnome Lite'"
    prompt+="\n'Gnome Lite' is a completely minimal version with only the apps needed to get to the desktop."
    prompt+="\nThis does not include a Terminal, Settings, "
    prompt+="\n\n${LIGHT_YELLOW}'gnome full'${ENDSTYLE} or ${LIGHT_YELLOW}'gnome lite'${ENDSTYLE}"
    echo -e $prompt

    while IFS= read -p "> "; do
        case ${REPLY,,} in
            1|'gnome lite' ) DESKTOP="gnome-lite"
            break;;
            2|'gnome full' ) DESKTOP="gnome-full"
            break;;
            * ) _bad_command && _confirm_destop;;
        esac
    done
    if [[ $EDITING != true ]]; then
        _confirm_destop
    else
        _install_review
    fi
}

_confirm_destop() {
    clear
    prompt="You chose $DESKTOP, is this correct?"
    prompt+="\n\n${LIGHT_GREEN}[Y]es${ENDSTYLE} or ${LIGHT_RED}[N]o${ENDSTYLE}"
    echo -e $prompt

    while IFS= read -p "> "; do
        case ${REPLY,,} in
            yes|y|confirm|continue|next ) desktop_apps 
                break;;
            no|n|deny|back ) choose_desktop ;;
            * ) _bad_command && _confirm_destop;;
        esac
    done
}

declare -a DESKTOP_APPS

desktop_apps() {
    clear
    prompt="Please choose from this list any additional Apps that you would like to install."
    prompt+="\nAdditional Apps:"
    prompt+="\n${DESKTOP_APPS[@]}"
    prompt+="\nAdd an item (or type 'done' to finish):"
    echo -e $prompt
    while true; do
        read -p "> " input

        if [[ "$input" == "done" && $EDITING != true ]]; then
            desktop_apps_set=true
            _desktop_app_confirm && break
        else
            _install_review
        fi

        local is_allowed=false
        for item in "${DESKTOP_APPS[@]}"; do
            if [[ "$item" == "$input" ]]; then
                is_allowed=true
                break
            fi
        done

        if [[ "$is_allowed" == false ]]; then
            echo "Please enter a valid item."
            continue
        fi

        local is_duplicate=false
        for item in "${DESKTOP_APPS_CONFIRMED[@]}"; do
            if [[ "$item" == "$input" ]]; then
                is_duplicate=true
                break
            fi
        done

        if [[ "$is_duplicate" == true ]]; then
            echo "Duplicate item. Please enter a different item."
        else
            DESKTOP_APPS_CONFIRMED+=("$input")
            echo "Item added."
        fi
    done
}

_desktop_app_confirm() {
    clear
    echo "You chose to install:"
    for item in "${DESKTOP_APPS[@]}"; do
        prompt+="$item"
    done
    prompt="Is this correct?"
    prompt+="\n\n${LIGHT_GREEN}[Y]es${ENDSTYLE} or ${LIGHT_RED}[N]o${ENDSTYLE}"
    echo -e $prompt
    while IFS= read -p "> "; do
        case ${REPLY,,} in
            yes|y|confirm|continue|next ) desktop_apps 
                break;;
            no|n|deny|back ) choose_desktop ;;
            * ) _bad_command && _confirm_destop && break;;
        esac
    done
}

_account_query() {
    clear
    prompt="Would you like to create user account?"
    prompt+="\n"
    prompt+="\n${LIGHT_GREEN}[Y]es${ENDSTYLE} or ${LIGHT_RED}[N]o${ENDSTYLE}"
    echo -e $prompt
    while IFS= read -p "> "; do
        case ${REPLY,,} in
            continue|next|yes|y ) account_created=true
                account_creation
                break;;
            cancel|back|no|n ) account_created=false
                system_hostname
                break;;
            exit|quit ) exit;;
            * ) _bad_command
                break;;
        esac
    done
}

account_creation() {
    clear
    prompt="Please input your username\n"
    echo -e $prompt
    read -p "> " USERNAME
    clear
    echo -e "Henceforth, You shall be known as: ${USERNAME}"
    sleep 1
    _account_passwd
}

_account_passwd() {
    clear
    prompt="${LIGHT_RED}[Warning!]${ENDSTYLE} ${FAINT}This password will be stored plain-text until the end of the script.${ENDSTYLE}"
    prompt+="\nPlease set your User password"
    echo -e $prompt
    IFS= read -rsp "> " USER_PW
    echo "Please retype:"
    IFS= read -rsp "> " USER_PW_CONFIRM
    if [[ $USER_PW_CONFIRM != $USER_PW ]]; then
        _bad_password && _account_passwd
    else
        _user_created="${USERNAME}"
        _user_sudoers
    fi
} 

_user_sudoers() {
    clear
    prompt="Would you like ${GREEN}${USERNAME}${ENDSTYLE} to be a sudoer?"
    prompt+="\n\n${LIGHT_GREEN}[Y]es${ENDSTYLE} or ${LIGHT_RED}[N]o${ENDSTYLE}"
    echo -e $prompt
    while IFS= read -p "> "; do
        case ${REPLY,,} in
            yes|y ) SUDOER=true
                break;;
            no|n ) SUDOER=false
                break;;
            exit|quit ) exit;;
            * ) _bad_command && _user_sudoers
                break;;
        esac
    done
    system_hostname
}

system_hostname() {
    clear
    prompt="What would you like to set the System's Hostname to?"
    echo -e $prompt
    read -p "> " $NEW_HOST_NAME
    _hostname_confirm
}

_hostname_confirm() {
    clear
    prompt="Are you sure you would like ${NEW_HOST_NAME} to be your System's Hostname?"
    prompt+="\n\n${LIGHT_GREEN}[Y]es${ENDSTYLE} or ${LIGHT_RED}[N]o${ENDSTYLE}"
    echo -e $prompt
    while IFS= read -p "> "; do
        case ${REPLY,,} in
            yes|y ) 
                break;;
            no|n ) system_hostname
                break;;
            exit|quit ) exit;;
            * ) _bad_command && _user_sudoers
                break;;
        esac
    done
    if [[ $EDITING != true ]]; then
        select_locale
    else
        _install_review
    fi 
}

select_locale() { 
declare -A accepted_aliases=(
    ["en_us"]="en_US.utf8"
    ["english"]="en_US.utf8"
    ["american"]="en_US.utf8"
    ["american english"]="en_US.utf8"
    ["fr_fr"]="fr_FR.utf8"
    ["french"]="fr_FR.utf8"
    ["française"]="fr_FR.utf8"
    ["français"]="fr_FR.utf8"
    ["de_de"]="de_DE.utf8"
    ["german"]="de_DE.utf8"
    ["deutsch"]="de_DE.utf8"
)
    locales=($(ls /usr/share/i18n/locales))
    num_locales=${#locales[@]}

    echo "Select a locale from the list below (or type an alias):"
    for ((i = 0; i < num_locales; i++)); do
        echo "$((i + 1)). ${locales[i]}"
    done

    read -p "> " input

    if [[ $input =~ ^[0-9]+$ ]]; then
        if [[ $input -ge 1 && $input -le $num_locales ]]; then
            selected_locale=${locales[$((input - 1))]}
            echo "You selected: $selected_locale"
        else
            _bad_command && select_locale
        fi
    else # Check for available aliases
        if [[ -n "${accepted_aliases[$input]}" ]]; then
            selected_locale=${accepted_aliases[$input]}
            echo "You selected: $selected_locale (alias)"
        else
            _bad_command && select_locale
        fi
    fi

    # Generate the selected locale if it's not already available
    if ! locale -a | grep -q "^$selected_locale\$"; then
        locale-gen $selected_locale
        update-locale
    fi

    echo "LANG=${select_locale}" > /etc/locale.conf
    locale_set=true
    if [[ $EDITING != true ]]; then 
        install_confirm
    else
        _install_review
    fi
}

_install_review() {
    clear
    prompt="${BOLD}Please review all your info below.${ENDSTYLE}"
    prompt+="\nIf there are any changes you would like to make, simply type the label name"
    prompt+="\nand you will be taken to that section so you can make changes."
    prompt+="\n"
    if [[ $DEVICE != "" ]]; then
        prompt+="\nDisk Selection: ${GREEN}${DEVICE}${ENDSTYLE}"
    else
        prompt+="\nDisk Selection: ${RED}not set${ENDSTYLE}" 
    fi
    if [[ $SWAP = true ]]; then
        prompt+="\nSwap: ${FAINT}Enabled${ENDSTYLE}"
    else
        prompt+="\nSwap: ${FAINT}Disabled${ENDSTYLE}"
    fi
    if [[ $FILE_SYSTEM != '' ]]; then
        prompt+="\nFile System: ${GREEN}${FILE_SYSTEM}${ENDSTYLE}"
    else
        prompt+="\nFile System: ${RED}not set${ENDSTYLE}"
    fi
    if [[ $TEXT_EDITOR != '' ]]; then
        prompt+="\nText Editor: ${GREEN}${TEXT_EDITOR}${ENDSTYLE}"
    else
        prompt+="\nText Editor: ${RED}not set${ENDSTYLE}"
    fi
    if [[ $root_pass_set = true ]]; then
        prompt+="\nRoot Password: ${GREEN}set${ENDSTYLE}"
    else
        prompt+="\nRoot Password: ${RED}not set${ENDSTYLE}"
    fi
    if [[ $AUR_WRAPPER != 'none' ]]; then
        prompt+="\nAUR Wrapper: ${GREEN}${AUR_WRAPPER}${ENDSTYLE}"
    else
        prompt+="\nAUR Wrapper: ${FAINT}None Chosen${ENDSTYLE}"
    fi
    if [[ $DESKTOP != "" ]]; then
        prompt+="\nDesktop: ${GREEN}${DESKTOP}${ENDSTYLE}"
    else
        prompt+="\nDesktop: ${RED}not set${ENDSTYLE}"
    fi
    if [[ $desktop_apps_set != true ]]; then
        prompt+="\nDesktop Apps: ${RED}not set${ENDSTYLE}"
    else
        prompt+="\nDesktop Apps: ${GREEN}defined${ENDSTYLE}"
    fi
    if [[ $account_created = true ]]; then
        prompt+="\nUser Account: ${GREEN}${account_created}${ENDSTYLE}"
    else
        prompt+="\nUser Account: ${FAINT}No User Account${ENDSTYLE}"
    fi
    if [[ $HOST_NAME != "" ]]; then
        prompt+="\nHostname: ${GREEN}${NEW_HOST_NAME}${ENDSTYLE}"
    else
        prompt+="\nHostname: ${RED}not set${ENDSTYLE}"
    fi
    if [[ $locale_set != false ]]; then
        prompt+="\nLocale: ${GREEN}${selected_locale}${ENDSTYLE}"
    else
        prompt+="\nLocale: ${RED}not set${ENDSTYLE}"
    fi
    prompt+="\n\n${LIGHT_GREEN}[Confirm]${ENDSTYLE} to begin system installation or ${LIGHT_RED}[Cancel]${ENDSTYLE} to close the script now."
    echo -e $prompt
    while IFS= read -p "> "; do
        EDITING=true
        case ${REPLY,,} in
            disk|'disk selection' ) disk_select
                break;;
            swap ) swap_partition
                break;;
            'file system'|fs|file ) choose_filesystem
                break;;
            'text editor'|editor|text ) text_editor
                break;;
            root|password|'root password' ) root_password
                break;;
            aur|wrapper|'aur wrapper' ) aur_wrapper
                break;;
            desktop ) choose_desktop
                break;;
            'desktop apps'|apps ) desktop_apps
                break;;
            user|'user account' ) account_creation
                break;;
            hostname ) system_hostname
                break;;
            locale ) select_locale
                break;;
            start|restart ) init_test
                break;;
            confirm|continue|next ) _install_final_confirm
                break;;
            cancel|exit|quit ) exit;;
            * ) _bad_command && _install_review
                break;;
        esac
    done
    EDITING=false
}

_install_final_confirm() {
    clear
    prompt="Are you absolutely sure you would like proceed with installation?"
    prompt+="\n${LIGHT_RED}This will format your drives, which includes deleting all data.${ENDSTYLE}"
    prompt+="\n${LIGHT_GREEN}[Y]es${ENDSTYLE} or ${LIGHT_RED}[N]o${ENDSTYLE}"
    echo -e "${prompt}"
    while IFS= read -p "> "; do
        case ${REPLY,,} in
            yes|y|confirm|continue|next ) system_install && exit ;;
            no|n|deny|cancel|back ) choose_filesystem && break ;;
            * ) _bad_command && _filesystem_confirm ;;
        esac
    done
}

_catastrophic_failure() {
    clear
    prompt="It would seem that an irrecoverable error has happened in ${step_failed}"
    case $step_failed in
        fdisk ) prompt+="\nUnable to successfully execute fdisk on ${DEVICE}" ;;
        mkfs ) prompt+="\nUnable to successfully execute mkfs with ${FILE_SYSTEM}" ;;
        mount ) prompt+="\nUnable to successfully mount ${DEVICE}" ;;
        pacman ) prompt+="\nUnable to successfully configure Pacman" ;;
        pacstrap ) prompt+="\nUnable to successfully execute Pacstrap" ;;
        chroot ) prompt+="\nUnable to execute systeme CHROOT" ;;
    esac
    echo -e $prompt
    exit 1
}

SYSTEM_INSTALL() {
    # Basically a configured list of all installation steps for easy troubleshooting.
    _run_fdisk || step_failed="fdisk" && _catastrophic_failure 
    _run_mkfs || step_failed="mkfs" && _catastrophic_failure
    _run_mount || step_failed="mount" && _catastrophic_failure
    _run_pacman_config || step_failed="pacman" && _catastrophic_failure
    _run_pacstrap || step_failed="pacstrap" && _catastrophic_failure
    _run_chroot || step_failed="chroot" && _catastrophic_failure
}

_run_fdisk() {
    clear
    fdisk "${DEVICE}" <<EOF
g
w
EOF
    if [[ $SWAP != true ]]; then
        fdisk "$DEVICE" <<EOF
n
1
    # !important! Accept Default Value
+512MiB
n
2
    # !important! Accept Default Value
    # !important! Accept Default Value
w
EOF
    else
                fdisk "$DEVICE" <<EOF
n
1
    # !important! Accept Default Value
+512MiB
n
2
    # !important! Accept Default Value
+2GiB
w
n
3
    # !important! Accept Default Value
    # !important! Accept Default Value
w
EOF
    fi
}

_run_mkfs() {
    if [[ $DRIVE != "/dev/nvme0n1" ]]; then
        if [[ $FILE_SYSTEM != 'btrfs' ]]; then
            mkfs.ext4 "${DEVICE}3"
        else
            mkfs.btrfs "${DEVICE}3"
        fi
        if [[ $SWAP != false ]]; then
            mkswap "${DEVICE}2"
        fi
        mkfs.fat -F 32 "${DEVICE}1"
    else
        if [[ $FILE_SYSTEM != 'btrfs' ]]; then
            mkfs.ext4 "${DEVICE}p3"
        else
            mkfs.btrfs "${DEVICE}p3"
        fi
        if [[ $SWAP != false ]]; then
            mkswap "${DEVICE}p2"
        fi
        mkfs.fat -F 32 "${DEVICE}p1"
    fi
}

_run_mount() {
    if [[ $SWAP != false ]]; then
        if [[ $DEVICE != '/dev/nvme0n1' ]]; then
            swapon "${DEVICE}2"
            mount --mkdir "${DEVICE}3" /mnt
            mount --mkdir "${DEVICE}1" /mnt/boot
        else
            swapon "${DEFICE}p2"
            mount --mkdir "${DEVICE}p3" /mnt
            mount --mkdir "${DEVICE}p1" /mnt/boot
        fi
    else
        if [[ $DEVICE != '/dev/nvme0n1' ]]; then
            mount --mkdir $DEVICE /mnt
            mount --mkdir "$DEVICE /mnt/boot"
        else
            mount --mkdir "${DEVICE}p3" /mnt
            mount --mkdir "${DEVICE}p1" /mnt/boot
        fi
    fi
}

_run_pacman_config() {
    sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 12/g' /etc/pacman.conf
    sed -i 's/#Color/Color/g' /etc/pacman.conf
    sed -i 's/#VerbosePkgLists/VerbosePkgLists/g' /etc/pacman.conf
}

_run_pacstrap() {
    packages="gdm git curl wget ${TEXT_EDITOR} "
    if [[ ${DESKTOP} != "gnome-lite" ]]; then
        packages+="gnome-desktop ${DESKTOP_APPS_CONFIRMED} "
    else
        packages+="gnome gnome-extra "
    fi
    if [[ ${AUR_WRAPPER} = "yay" ]]; then
        packages+="go "
    fi
    pacstrap -K /mnt base linux linux-firmware ${packages}
}

_run_chroot() {

export NEW_HOST_NAME
export select_locale
export ROOT_PW_CONFIRM
export USERNAME
export USER_PW_CONFIRM

cat << 'EOF' > /mnt/temp_script.sh
#!/bin/bash

post_install_steps() {
    echo "${NEW_HOST_NAME}" > /etc/hostname
    echo "LANG=${selected_locale}" > /etc/locale.conf
    echo root:$ROOT_PW_CONFIRM | chpasswd
    useradd -m -G wheel,video,audio $USERNAME -s /bin/bash
    echo $USERNAME:$USER_PW_CONFIRM | chpasswd
    systemctl enable gdm
    if [[ AUR_WRAPPER = "yay" ]]; then
        cd /tmp
        git clone https://aur.archlinux.org/yay.git
        chown -R $USERNAME yay/
        cd yay/
        su -c "makepkg" $USERNAME
        pacman -U --no-confirm yay-*.pkg.tar.zst
    elif [[ AUR_WRAPPER = "paru" ]]; then
        cd /tmp
        git clone https://aur.archlinux.org/paru.git
        chown -R $USERNAME paru/
        cd paru/
        su -c "makepkg" $USERNAME
        pacman -U --no-confirm paru-*.pkg.tar.zst
    else
        clear
    fi
    rm -rf /tmp/*
}

post_install_steps
EOF

chmod +x /mnt/temp_script.sh
arch-chroot /mnt /temp_script.sh
rm /mnt/temp_script.sh
}

SUCCESSFUL_FINISH() {
    clear
    prompt="Arch Linux has been installed successfully!"
    prompt+="\nWould you like to reboot now?"
    prompt+="\n"
    prompt+="\n${LIGHT_GREEN}'[Y]es'${ENDSTYLE} or ${LIGHT_RED}'[N]o'${ENDSTYLE}"
    echo -e $prompt
    sleep 1
    while IFS= read -p "> "; do
        case ${REPLY,,} in
            yes|y ) shutdown_timer
                break;;
            no|n ) exit
                break;;
            * ) _bad_command;;
        esac
    done
}

shutdown_timer() {
    for i in {5..1}; do
        clear
        echo "The system will restart in ${i}"
        sleep 1
    done
    umount -R /mnt
    reboot now --no-wall
}

main_menu
