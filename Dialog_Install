#!/bin/bash

ENDSTYLE="\Zn"
BOLD="\Zb"
BOLD_END="\ZB"
REVERSE="\Zr"
REVERSE_END="\ZR"
UNDERLINE="\Zu"
UNDERLINE_END="\ZU"
RED="\Z1"
GREEN="\Z2"
YELLOW="\Z3"
BLUE="\Z4"
MAGENTA="\Z5"
CYAN="\Z6"
WHITE="\Z7"

TERMINAL_RED="\e[31m"
TERMINAL_END="\e[0m"

BACKTITLE="Rarch Installer"

# Default Values
DEVICE=""
SWAP=""
FILE_SYSTEM=""
TEXT_EDITOR=""
root_pass_set=false
AUR_WRAPPER="none"
DESKTOP="None (TTY Only)"
account_created=false
HOST_NAME=""
SELECTED_LOCALE="en_US.UTF-8"
DEFAULT_LOCALE=true
prompt_argument=1
ERROR=0
ROOT_INCORRECT=1

trap 'aborted' INT

aborted() {
    clear
    prompt="${TERMINAL_RED}Rarch Installer has been Aborted.${TERMINAL_END}"
    prompt+="\nIf this was due to a bug or issue, please report it to the the Github."
    prompt+="\n\nhttps://github.com/RileyMeta/Arch_Installer/issues/new"
    prompt+="\n"
    echo -e $prompt
    exit 0
}

check_dependency() {
    if ! command -v "$1" &> /dev/null; then
        pacman -Sy --noconfirm dialog
    fi
}

init_test() {
    total_ram=$(free -m | awk '/^Mem:/{print $2}')
    dialog_test=$(ls /usr/bin/dialog)

    if [ "$total_ram" -le 2048 ]; then
        _ram_fail
    else
        ping -c 1 google.com || _ping_fail
        check_dependency dialog
    fi
}

_menu_checks() {
    clear
    prompt=""
    case $prompt_argument in
        1) prompt+="${BOLD}Welcome to My Arch Linux Installer${ENDSTYLE}"
           prompt+="\nBelow are all the available steps.";;
        2) prompt+="${BOLD}Please review all your info below.${ENDSTYLE}"
           prompt+="\nIf there are any changes you would like to make, simply type the label name"
           prompt+="\nand you will be taken to that section so you can make changes.";;
        3) prompt+="${RED}${BOLD}The script cannot conitnue, please select your storage drive.${ENDSTYLE}";;
        4) prompt+="${RED}${BOLD}The script cannot conitnue, please select a Filesystem.${ENDSTYLE}";;
        5) prompt+="${RED}${BOLD}The script cannot conitnue, please select a Text Editor.${ENDSTYLE}";;
        6) prompt+="${RED}${BOLD}The script cannot conitnue, please set a root password.${ENDSTYLE}";;
        7) prompt+="${RED}${BOLD}The script cannot conitnue, please select a Desktop.${ENDSTYLE}";;
        8) prompt+="${RED}${BOLD}The script cannot conitnue, please set a Hostname.${ENDSTYLE}";;
    esac
        LOCALE_LABEL="Locale: ${GREEN}${SELECTED_LOCALE}${ENDSTYLE}"
    if [[ $DEFAULT_LOCALE = true ]]; then
        LOCALE_LABEL+=" *default"
    fi
    if [[ ${NEW_HOST_NAME} != "" ]]; then
        HOSTNAME_LABEL="Hostname: ${GREEN}${NEW_HOST_NAME}${ENDSTYLE}" 
    else
        HOSTNAME_LABEL="Hostname: ${RED}not set${ENDSTYLE}"
    fi
    if [[ $DEVICE != "" ]]; then
        DISKS_LABEL="Disk Selection: ${GREEN}${DEVICE}${ENDSTYLE}"
    else
        DISKS_LABEL="Disk Selection: ${RED}not set${ENDSTYLE}" 
    fi
    if [[ $FILE_SYSTEM != '' ]]; then
        FS_LABEL="File System: ${GREEN}${FILE_SYSTEM}${ENDSTYLE}" 
    else
        FS_LABEL="File System: ${RED}not set${ENDSTYLE}"
    fi
    if [[ $SWAP = true ]]; then
        SWAP_LABEL="Swap: ${CYAN}Enabled${ENDSTYLE}"
    else
        SWAP_LABEL="Swap: ${CYAN}Disabled${ENDSTYLE}"
    fi
    if [[ $TEXT_EDITOR != '' ]]; then
        if [[ $SYMLINK = true ]]; then
            TEXT_EDITOR_LABEL="Text Editor: ${GREEN}${TEXT_EDITOR}*${ENDSTYLE}"
        else
            TEXT_EDITOR_LABEL="Text Editor: ${GREEN}${TEXT_EDITOR}${ENDSTYLE}"
        fi
    elif [[ $TEXT_EDITOR = 'none' ]]; then
        TEXT_EDITOR_LABEL="Text Editor: ${GREEN}None${ENDSTYLE}"
    else
        TEXT_EDITOR_LABEL="Text Editor: ${RED}not set${ENDSTYLE}"
    fi
    if [[ $root_pass_set = true ]]; then
        ROOT_PASS_LABEL="Root Password: ${GREEN}set${ENDSTYLE}" 
    else
        ROOT_PASS_LABEL="Root Password: ${RED}not set${ENDSTYLE}"
    fi
    if [[ $AUR_WRAPPER != 'none' ]]; then
        AUR_LABEL="AUR Wrapper: ${GREEN}${AUR_WRAPPER}${ENDSTYLE}"
    else
        AUR_LABEL="AUR Wrapper: ${CYAN}None Chosen${ENDSTYLE}"
    fi
    DESKTOP_LABEL="Desktop: ${GREEN}${DESKTOP}${ENDSTYLE}" 
    if [[ $account_created = true ]]; then
        if [[ $SUDOER = true ]]; then
            USER_ACCOUNT_LABEL="User Account: ${GREEN}${NEW_USERNAME}${ENDSTYLE}*"
        else
            USER_ACCOUNT_LABEL="User Account: ${GREEN}${NEW_USERNAME}${ENDSTYLE}"
        fi
    else
        USER_ACCOUNT_LABEL="User Account: ${CYAN}No User Account${ENDSTYLE}"
    fi
    if [[ $ERROR != 1 ]]; then
        MAIN_TITLE="Main Menu"
    else
        MAIN_TITLE="An Error has occurred"
    fi
}

main() {
    _menu_checks
    while true; do
    mainMenuOptions=(
    1 "${LOCALE_LABEL}"
    2 "${HOSTNAME_LABEL}"
    3 "${DISKS_LABEL}"
    4 "${FS_LABEL}"
    5 "${SWAP_LABEL}"
    6 "${ROOT_PASS_LABEL}"
    7 "${USER_ACCOUNT_LABEL}"
    8 "${TEXT_EDITOR_LABEL}"
    9 "${DESKTOP_LABEL}"
    10 "${AUR_LABEL}"
    11 "${GREEN}${REVERSE} Install ${ENDSTYLE}"
)
result=$(dialog --clear --title "${MAIN_TITLE}" \
    --backtitle "$BACKTITLE" \
    --colors \
    --cancel-label "Exit" \
    --stdout \
    --menu "${prompt}" 0 0 10 "${mainMenuOptions[@]}")

case $? in
    0)  case $result in
            1) locale_selection
                break ;;
            2) hostname
                break ;;
            3) disk_selection
                break ;;
            4) filesystem
                break ;;
            5) swap_config
                break ;;
            6) root_password
                break ;;
            7) account_creation
                break ;;
            8) texteditor
                break ;;
            9) choose_desktop
                break ;;
            10) aur_wrapper
                break ;;
            11) _install_check
                break ;;
        esac
        ;;
    1) clear 
        exit 1 ;;
esac
    done
}

locale_selection() {
    options=("af_ZA" "ar_SA" "be_BY" "bg_BG" "bs_BA" "ca_ES" "cs_CZ" "da_DK" "de_DE" "el_GR" "en_GU" "en_US" "es_ES" "et_EE" "eu_ES" "fa_IR" "fi_FI" "fil_P" "fr_BE" "fr_CA" "fr_CH" "fr_FR" "ga_IE" "gl_ES" "he_IL" "hi_IN" "hr_HR" "hu_HU" "id_ID" "is_IS" "it_IT" "ja_JP" "ka_GE" "km_KH" "kn_IN" "ko_KR" "lo_LA" "lt_LT" "mi_NZ" "mi_NZ" "mi_NZ" "mi_NZ" "ml_IN" "mn_MN" "ms_MY" "nl_NL" "nn_NO" "no_NO" "no_NO" "pl_PL" "pt_BR" "pt_PT" "pt_TL" "ro_RO" "ru_RU" "sk_SK" "sl_SI" "so_SO" "sq_AL" "sr_CS" "sv_SE" "ta_IN" "th_TH" "tr_TR" "uk_UA" "vi_VN" "zh_CN" "zh_TW")

    menu_options=()
    i=1
    for option in "${options[@]}"; do
        menu_options+=("$i" "$option")
        ((i++))
    done

    exec 3>&1
    if [ $DEFAULT_LOCALE = true ]; then
        locale_message="Default: ${CYAN}${SELECTED_LOCALE}${ENDSTYLE}"
    else
        locale_message="Current Selection: ${CYAN}${SELECTED_LOCALE}${ENDSTYLE}"
    fi
    locale_message+="\nPlease select your Locale"
    locale_message+="\n\nor press 'Skip' to confirm the default"
    if [ $DEFAULT_LOCALE = true ]; then
        LOCALE_CANCEL_LABEL="SKIP"
    else
        LOCALE_CANCEL_LABEL="BACK"
    fi
    selection=$(dialog --clear \
                       --title "Locale Selection" \
                       --colors \
                       --ok-label "SELECT" \
                       --cancel-label "${LOCALE_CANCEL_LABEL}" \
                       --menu "${locale_message}" 15 40 10 \
                       "${menu_options[@]}" \
                       2>&1 1>&3)
    exec 3>&-

    if [ -n "$selection" ]; then
        chosen_option="${options[$((selection - 1))]}"
        SELECTED_LOCALE="${chosen_option}.UTF-8"
        DEFAULT_LOCALE=false
        main
    else
        if [ $DEFAULT_LOCALE = true ];then 
            SELECTED_LOCALE="en_US.UTF-8"
            DEFAULT_LOCALE=false
        else
            SELECTED_LOCALE="${SELECTED_LOCALE}"
        fi
        main
    fi
}

_install_check() {
    if [[ $NEW_HOST_NAME = "" ]]; then
        prompt_argument=8
        ERROR=1
        main
    elif [[ $DEVICE = "" ]]; then
        prompt_argument=3
        ERROR=1
        main
    elif [[ $FILE_SYSTEM = "" ]]; then
        prompt_argument=4
        ERROR=1
        main
    elif [[ $ROOT_PW_CONFIRM = "" ]]; then
        prompt_argument=6
        ERROR=1
        main
    elif [[ $TEXT_EDITOR = "" ]]; then
        prompt_argument=5
        ERROR=1
        main
    else
        SYSTEM_INSTALL
    fi
}

disk_selection() {
    DISK_SELECT_PROMPT="Below are your Available Storage Devices:\n"
    output=$(lsblk -Ald -o NAME,SIZE,RM)

    while IFS= read -r line; do
        name=$(echo "$line" | awk '{print $1}')
        size=$(echo "$line" | awk '{print $2}')
        rm=$(echo "$line" | awk '{print $3}')

        if [[ "$name" != *"SWAP"* && "$name" != *"zram0"* && "$name" != *"NAME"* ]]; then
            if [[ "$rm" -eq 1 ]]; then
                DISK_SELECT_PROMPT+="\n$name ${BLUE}${size}${ENDSTYLE} ${REVERSE}${YELLOW}[Removable]${ENDSTYLE}"
            else
                DISK_SELECT_PROMPT+="\n$name ${BLUE}${size}${ENDSTYLE}"
            fi
        fi
    done <<< "$output"
    DISK_SELECT_PROMPT+="\n\nPlease Select the Disk you would like to install Linux to"
    mapfile -t options < <(lsblk -Ald -o NAME | tail -n +2)

    menu_options=""
    i=1
    for option in "${options[@]}"; do
        if [[ "$option" != "zram0" && "$option" != "NAME" && "$option" != *SWAP* ]]; then
            menu_options+="$i $option "
            ((i++))
        fi
    done

    exec 3>&1
    selection=$(dialog --clear \
                       --backtitle "${BACKTITLE}" \
                       --colors \
                       --title "Disk Selection" \
                       --cancel-label "BACK" \
                       --ok-label "SELECT" \
                       --menu "${DISK_SELECT_PROMPT}" 0 0 0 \
                       $menu_options \
                       2>&1 1>&3)
    exec 3>&-

    if [ -n "$selection" ]; then
        chosen_option=$(echo "$menu_options" | awk -v sel="$selection" '{for(i=1; i<=NF; i+=2) if($i == sel) print $(i+1)}')
        DEVICE="/dev/$chosen_option"
        STEP_CONFIRM=1
        CONFIRM_MESSAGE=1
        _drive_confirmation
    else
        main
    fi
}

_drive_confirmation() {
    clear
    if dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "Disk Confirmation" \
    --yesno "Are you sure you would like to use ${CYAN}${DEVICE}${ENDSTYLE}?" 0 0 ; then
        main
    else
        DEVICE=""
        disk_selection
    fi
}

hostname() {
    local NEW_HOST_NAME
    NEW_HOST_NAME=$(dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "Hostname" \
    --inputbox "Please set the Hostname for your computer:" 8 40 \
    --output-fd 1)

    if [ $? -eq 0 ]; then
        prompt_argument=1
        ERROR=0
        main
    else
        main
    fi
}

filesystem() {
    while true; do
    filesystemOptions=(
    1 "EXT4"
    2 "BTRFS"
)
result=$(dialog --clear --title "Filesystem Selection" \
    --backtitle "$BACKTITLE" \
    --colors \
    --cancel-label "Exit" \
    --stdout \
    --menu "\nPlease select your preferred file system" 0 0 3 "${filesystemOptions[@]}")

case $? in
    0)  case $result in
            1) FILE_SYSTEM="ext4"
                echo "${FILE_SYSTEM}"
                main
                break ;;
            2) FILE_SYSTEM="btrfs"
                echo "${FILE_SYSTEM}"
                main
                break ;;
        esac
        ;;
    1) main;;
esac
    done
}

swap_config() {
    clear
    if dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "Swap Partition" \
    --yesno "\nWould you like to use a ${CYAN}2GiB${ENDSTYLE} swap partition?" 0 0 ; then
        SWAP=true
        main
    else
        SWAP=false
        main
    fi
}

_root_pass_error() {        
    case ${ROOT_INCORRECT} in
        1) ROOT_PW_TITLE="Root Password"
            ROOT_PW_MSG="Please input your root Password";;
        2) ROOT_PW_TITLE="Please Try Again"
            ROOT_PW_MSG="The passwords you entered did not match. \nPlease try again.";;
        3) ROOT_PW_TITLE="Please Try Again"
            ROOT_PW_MSG="The Root Password cannot be blank. \nPlease try again.";;
    esac
}

root_password() {
    _root_pass_error
    ROOT_PW=$(dialog --clear \
    --backtitle "${BACKTITLE}" \
    --title "${ROOT_PW_TITLE}" \
    --insecure \
    --passwordbox "${ROOT_PW_MSG}" 0 0 \
    --output-fd 1)

    if [$? -eq 1 ]; then
        main
    else
        if [[ $ROOT_PW != "" ]]; then 
            _confirm_root_pw
        else
            ROOT_INCORRECT=3
            root_password
        fi
    fi
}

_confirm_root_pw() {
    ROOT_PW_CONFIRM=$(dialog --clear \
    --backtitle "${BACKTITLE}" \
    --title "Root Password" \
    --insecure \
    --passwordbox "Please confirm your root Password" 0 0 \
    --output-fd 1)

    if [$? -eq 1 ]; then
        main
    else
        if [[ $ROOT_PW_CONFIRM = $ROOT_PW ]]; then
            root_pass_set=true
            main
        else
            ROOT_INCORRECT=2
            root_password
        fi
    fi
}

account_creation() {
    if [[ $USERNAME_INCORRECT = true ]]; then
        USERNAME_PROMPT="A username cannot be blank. \nPlease try again."
    else
        USERNAME_PROMPT="Please type your username:"
    fi
    USERNAME=$(dialog --clear \
    --backtitle "${BACKTITLE}" \
    --title "User Account Creation" \
    --insecure \
    --inputbox "${USERNAME_PROMPT}" 0 0 \
    --output-fd 1)

    if [$? -eq 1 ]; then
        main
    else
        if [[ $USERNAME != "" ]]; then 
            USER_INCORRECT=1 # Default / Normal response
            NEW_USERNAME="${USERNAME,,}"
            user_password_check
        else
            USERNAME_INCORRECT=true
            account_creation
        fi
    fi
}

user_password_check() {
    if dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "User Account Password" \
    --yesno "Would you like ${BLUE}${NEW_USERNAME}${ENDSTYLE} to have a password?" 0 0; 
    then
        user_password
        user_pass=true
    else
        user_pass=false
        account_created=true
        main
    fi
}

user_sudoers_check() {
    if dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "Sudoers" \
    --yesno "Would you like ${BLUE}${NEW_USERNAME}${ENDSTYLE} to be a sudoer?" 0 0; 
    then
        SUDOER=true
        main
    else
        SUDOER=false
        main
    fi
}

_user_pass_error() {        
    case ${USER_INCORRECT} in
        "1") USER_PW_MSG="Please input your user Password";;
        "2") USER_PW_MSG="The passwords you entered did not match. \nPlease try again.";;
        "3") USER_PW_MSG="The User Password cannot be blank. \nPlease try again.";;
    esac
}

user_password() {
    _user_pass_error
    USER_PW=$(dialog --clear \
    --backtitle "${BACKTITLE}" \
    --title "User Password" \
    --insecure \
    --passwordbox "${USER_PW_MSG}" 0 0 \
    --output-fd 1)

    if [$? -eq 1 ]; then
        main
    else
        if [[ $USER_PW != "" ]]; then 
            _confirm_user_pw
        else
            USER_INCORRECT=3
            user_password
        fi
    fi
}

_confirm_user_pw() {
    USER_PW_CONFIRM=$(dialog --clear \
    --backtitle "${BACKTITLE}" \
    --title "User Password" \
    --insecure \
    --passwordbox "Please confirm your user Password" 0 0 \
    --output-fd 1)

    if [$? -eq 1 ]; then
        main
    else
        if [[ $USER_PW_CONFIRM = $USER_PW ]]; then
            user_pass_set=true
            account_created=true
            user_sudoers_check
        else
            USER_INCORRECT=2
            user_password
        fi
    fi
}

texteditor() {
    while true; do
    texteditorOptions=(
    1 "Vi"
    2 "Vim"
    3 "NeoVim"
    4 "Nano"
    5 "Emacs"
    6 "None"
)
result=$(dialog --clear --title "Text Editor Selection" \
    --backtitle "$BACKTITLE" \
    --colors \
    --cancel-label "BACK" \
    --stdout \
    --menu "\nPlease select your preferred console text editor" 0 0 6 "${texteditorOptions[@]}")

case $? in
    0)  case $result in
            1) TEXT_EDITOR="vi"
                main
                break ;;
            2) TEXT_EDITOR="vim"
                main
                break ;;
            3) TEXT_EDITOR="neovim"
                text_editor_symlink
                break ;;
            4) TEXT_EDITOR="nano"
                text_editor_symlink
                break ;;
            5) TEXT_EDITOR="emacs"
                text_editor_symlink
                break ;;
            6) TEXT_EDITOR="none"
                main
                break ;;
        esac
        ;;
    1) main;;
esac
    done
}

text_editor_symlink() {
    if dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "User Account Password" \
    --yesno "Would you like to symlink ${BLUE}${TEXT_EDITOR}${ENDSTYLE} to /usr/bin/vi? \
    \n\nThis would allow you to work with apps that require vi (like Visudo)." 0 0;
    then
        SYMLINK=true
        main
    else
        main
    fi
}

choose_desktop() {
    while true; do
    desktopOptions=(
    1 "Gnome"
    2 "KDE Plasma"
    3 "XFCE"
    4 "None (TTY Only)"
)
result=$(dialog --clear --title "Desktop Environment" \
    --backtitle "$BACKTITLE" \
    --colors \
    --cancel-label "BACK" \
    --stdout \
    --menu "\nPlease select your preferred Desktop Environment" 0 0 3 "${desktopOptions[@]}")

case $? in
    0)  case $result in
            1) DESKTOP="Gnome"
                display_manager
                break ;;
            2) DESKTOP="Kde Plasma"
                display_manager
                break ;;
            3) DESKTOP="XFCE"
                display_manager
                break ;;
            4) DESKTOP="None (TTY Only)"
                display_manager
                break ;;
        esac
        ;;
    1) main;;
esac
    done
}

display_manager() {
    if [[ $DESKTOP = 'Gnome' ]]; then
        GDM_PROMPT="GDM (*Recommended for Gnome)"
    else
        GDM_PROMPT="GDM"
    fi

    while true; do
    displaymanagerOptions=(
    1 "${GDM_PROMPT}"
    2 "SDDM"
    3 "LightDM"
    4 "SX (StartX alternative)"
)
result=$(dialog --clear --title "Display Manager Selection" \
    --backtitle "$BACKTITLE" \
    --colors \
    --cancel-label "Exit" \
    --stdout \
    --menu "\nPlease select your preferred Display Manager" 0 0 3 "${displaymanagerOptions[@]}")

case $? in
    0)  case $result in
            1) DISPLAY_MANAGER="gdm"
                graphics_drivers
                break ;;
            2) DISPLAY_MANAGER="sddm"
                graphics_drivers
                break ;;
            3) DISPLAY_MANAGER="lightdm"
                graphics_drivers
                break ;;
            4) DISPLAY_MANAGER="sx"
                graphics_drivers
                break ;;
        esac
        ;;
    1) main;;
esac
    done
}

graphics_drivers() {
    while true; do
    graphicsdriverOptions=(
    1 "Nvidia (Proprietary)"
    2 "Nvidia (OpenKernel)"
    3 "Nvidia (Nouveau)"
    4 "Intel \ AMD (Mesa)"
)
result=$(dialog --clear --title "Graphics Driver Selection" \
    --backtitle "$BACKTITLE" \
    --colors \
    --cancel-label "Exit" \
    --stdout \
    --menu "\nPlease select your preferred graphics driver" 0 0 3 "${graphicsdriverOptions[@]}")

case $? in
    0)  case $result in
            1) GRAPHICS_DRIVER="nvidia-dkms nvidia-utils"
                main
                break ;;
            2) GRAPHICS_DRIVER="nvidia-open-dkms"
                main
                break ;;
            3) GRAPHICS_DRIVER="xf86-video-nouveau vulkan-nouveau"
                main
                break ;;
            4) GRAPHICS_DRIVER="mesa"
                main
                break ;;
        esac
        ;;
    1) main;;
esac
    done
}

aur_wrapper() {
    while true; do
    aurwrapperOptions=(
    1 "Yay (Written in Go)"
    2 "Paru (Written in Rust)"
    3 "None"
)
result=$(dialog --clear --title "Aur Wrapper" \
    --backtitle "$BACKTITLE" \
    --colors \
    --cancel-label "BACK" \
    --stdout \
    --menu "\nAn AUR Wrapper (or Helper) is a tool that automates installing dependencies and packages from the Arch User Repository." 0 0 3 "${aurwrapperOptions[@]}")

case $? in
    0)  case $result in
            1) AUR_WRAPPER="yay"
                main
                break ;;
            2) AUR_WRAPPER="paru"
                main
                break ;;
            3) AUR_WRAPPER="none"
                main
                break ;;
        esac
        ;;
    1) main;;
esac
    done
}

SYSTEM_INSTALL() {
    pacman_step=1 && _run_pacman_config
    pacman_step=2 && _run_pacman_config
    pacman_step=3 && _run_pacman_config
    partition_step=1 && _run_drive_partitioning
    if [[ $SWAP = true ]]; then
        partition_step=2 && _run_drive_partitioning
        partition_step=3 && _run_drive_partitioning
    else
        partition_step=4 && _run_drive_partitioning
    fi
    format_step=1 && _run_mkfs
    if [[ $SWAP = true ]]; then
        format_step=2 && _run_mkfs
    fi
    format_step=3 && _run_mkfs
    mounting_step=1 && _run_mount_fs
    if [[ $SWAP = true ]]; then
        mounting_step=2 && _run_mount_fs
    fi
    mounting_step=3 && _run_mount_fs
    _run_pacstrap
    systemd_step=1 && _run_systemd
    systemd_step=2 && _run_systemd
    _set_hostname
    _set_locale
    case $AUR_WRAPPER in
        'yay') chroot_steps=1 && _install_yay;;
        'paru') chroot_steps=2 && _install_paru;;
        'none') : ;;
    esac
    if [[ $SYMLINK = true ]]; then
        _run_symlink
    fi
    _run_chroot
    clean_up
    SUCCESSFUL_FINISH
}

_run_pacman_config() {
    case $pacman_step in
        1) prompt="\nEnabling Parallel Downloads";;
        2) prompt="\nEnabling Colorful Output";;
        3) prompt="\nEnabling Verbose Package lists";;
    esac
    dialog --title "Configuring Pacman..." --backtitle "${BACKTITLE}" \
    --colors \
    --infobox "$prompt" 8 50
    case $pacman_step in
        1) sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 10/g' /etc/pacman.conf ;;
        2) sed -i 's/#Color/Color/g' /etc/pacman.conf ;;
        3) sed -i 's/#VerbosePkgLists/VerbosePkgLists/g' /etc/pacman.conf ;;
    esac
    sleep 1
}

_run_drive_partitioning() {
    case $partition_step in
        1) prompt="\nCreating Boot Partition";;
        2) prompt="\nCreating SWAP Partition";;
        3|4) prompt="\nCreating Root Partition";;
    esac
    dialog --title "Partitioning ${DEVICE}..." --backtitle "${BACKTITLE}" \
    --colors \
    --infobox "$prompt" 8 50
    case $pacman_step in
        1)  fdisk $DEVICE <<EOF
g
w
EOF

    fdisk $DEVICE <<EOF
n
1

+128MiB
t
1
w
EOF ;;
        2)     fdisk $DEVICE <<EOF
n
2

+2GiB
t
2
swap
w
EOF ;;
        3) fdisk $DEVICE <<EOF
n
3


w
EOF ;;
        4) fdisk $DEVICE <<EOF
n
2


w
EOF  ;;
    esac
    sleep 1
}

_run_mkfs() {
    case $format_step in
        1) prompt="\nFormatting Boot Partition";;
        2) prompt="\nFormatting SWAP Partition";;
        3) prompt="\nFormatting Root Partition";;
    esac
    if [[ "$DEVICE" == *"nvme"* && $SWAP == true ]]; then
        BOOT_DEVICE="${DEVICE}p1"
        SWAP_DEVICE="${DEVICE}p2"
        ROOT_DEVICE="${DEVICE}p3"
    elif [[ "$DEVICE" == *"nvme"* && $SWAP != true ]]; then
        BOOT_DEVICE="${DEVICE}p1"
        ROOT_DEVICE="${DEVICE}p2"
    elif [[ "$DEVICE" != *"nvme"* && $SWAP = true]]; then
        BOOT_DEVICE="${DEVICE}1"
        SWAP_DEVICE="${DEVICE}2"
        ROOT_DEVICE="${DEVICE}3"
    else
        BOOT_DEVICE="${DEVICE}1"
        ROOT_DEVICE="${DEVICE}2"
    fi
    format_device=${DEVICE#'/dev/'}
    dialog --title "Formatting ${format_device}..." --backtitle "${BACKTITLE}" \
    --colors \
    --infobox "$prompt" 8 50
    case $format_step in
        1) mkfs.fat -F 32 $BOOT_DEVICE ;;
        2) mkswap $SWAP_DEVICE ;;
        3) mkfs."$FILE_SYSTEM" $ROOT_DEVICE ;;
    esac
    sleep 1
}

_run_mount_fs() {
    case $mounting_step in
        1) prompt="\nMounting the Boot Partition";;
        2) prompt="\nMounting the SWAP Partition";;
        3) prompt="\nMounting the Root Partition";;
    esac
    format_device=${DEVICE#'/dev/'}
    dialog --title "Mounting System Partitions..." --backtitle "${BACKTITLE}" \
    --colors \
    --infobox "$prompt" 8 50
    case $mounting_step in
        1) mount --mkdir $BOOT_DEVICE /mnt/boot ;;
        2) swapon $SWAP_DEVICE ;;
        3) mount $ROOT_DEVICE /mnt ;;
    esac
    sleep 1
}

_run_pacstrap() {
    packages="sudo git curl wget efibootmgr grub dosfstools xdg-user-dirs xdg-desktop-portal xdg-utils extra/networkmanager ${TEXT_EDITOR} ${DISPLAY_MANAGER} "
    case $DESKTOP in
        'Gnome') packages+="gnome gnome-extra xdg-desktop-portal-gtk xdg-desktop-portal-gnome " ;;
        'Kde Plasma') packages+="plasma plasma-meta xdg-desktop-portal-kde " ;;
        'XFCE') packages+="xfce4 xfce4-goodies " ;;
    esac
    if [[ "$AUR_WRAPPER" = "yay" ]]; then
        packages+="go "
    fi
    case $FILE_SYSTEM in
        "ext4") packages+="e2fsprogs " ;;
        "btrfs") packages+="btrfs-progs " ;;
    esac
    dialog --title "Installing Base System..." --backtitle "${BACKTITLE}" \
    --colors \
    --infobox "Currently installing: ${packages}" 8 50
    pacstrap -K /mnt base linux linux-firmware linux-headers "$packages"
    sleep 1
}

_run_genfstab() {
    dialog --title "Generating FSTAB..." --backtitle "${BACKTITLE}" \
    --colors \
    --infobox "\nCurrently populating /etc/FSTAB with relevant Device Data" 8 50
    genfstab -U /mnt >> /mnt/etc/fstab
    sleep 1
}

_run_systemd() {
    case $systemd_step in
        1) prompt="\nEnabling $DISPLAY_MANAGER";;
        2) prompt="\nEnabling Network Manager";;
    esac
    dialog --title "Enabling SystemD Services..." --backtitle "${BACKTITLE}" \
    --colors \
    --infobox "$prompt" 8 50
    case $systemd_step in
        1) systemd-nspawn -D /mnt --bind /sys --bind /proc --bind /dev -- systemctl enable $DISPLAY_MANAGER ;;
        2) systemd-nspawn -D /mnt --bind /sys --bind /proc --bind /dev -- systemctl enable NetworkManager ;;
    esac
    sleep 1
}

_set_hostname() {
    echo $NEW_HOST_NAME > /mnt/etc/hostname
}

_set_locale() {
    echo $SELECTED_LOCALE > /mnt/etc/locale.conf
}

_install_yay() {
export USERNAME
    cat << 'EOF' > /mnt/install_yay.sh
#!/bin/bash
_install_yay() {
    cd /tmp
    git clone https://aur.archlinux.org/yay.git
    chown -R $USERNAME yay/
    cd yay/
    su -c "makepkg" $USERNAME
    pacman -U --noconfirm yay-*.pkg.tar.zst
}
_install_yay
EOF
    chmod +x /mnt/install_yay.sh
    arch-chroot /mnt /install_yay.sh
    rm -rf /mnt/install_yay.sh
}

_install_paru() {
export USERNAME
    cat << 'EOF' > /mnt/install_paru.sh
#!/bin/bash
install_paru() {
    cd /tmp
    git clone https://aur.archlinux.org/paru.git
    chown -R $USERNAME paru/
    cd paru/
    su -c "makepkg" $USERNAME
    pacman -U --noconfirm paru-*.pkg.tar.zst
}
install_paru
EOF
    chmod +x /mnt/install_paru.sh
    arch-chroot /mnt /install_paru.sh
    rm -rf /mnt/install_paru.sh
}

_run_symlink() {
    ln -sf /mnt/usr/bin/$TEXT_EDITOR /mnt/usr/bin/vi
}

_run_chroot() {

export ROOT_PW_CONFIRM
export account_created
export USERNAME
export USER_PW_CONFIRM
export user_pass
export SUDOER

    cat << 'EOF' > /mnt/chroot_install.sh
#!/bin/bash

chroot_install_steps() {
    _set_root_passwd
    if [[ $account_created = true ]]; then
        _create_user
    fi
    if [[ $user_pass = true ]]; then
        _set_user_passwd
    fi
    if [[ $SUDOER = true ]]; then
        _run_sudoer
    fi
    _install_grub
}

_set_root_passwd() {
    echo root:$ROOT_PW_CONFIRM | chpasswd
}

_create_user() {
    useradd -m -G wheel,video,audio $USERNAME -s /bin/bash
}

_set_user_passwd() {
    echo $USERNAME:$USER_PW_CONFIRM | chpasswd
}

_run_sudoer() {
    sed -i "/^root.*ALL=(ALL:ALL) ALL/a\\${USERNAME} ALL=(ALL:ALL) ALL" /etc/sudoers
}

_install_grub() {
    mount $BOOT_DEVICE /boot
    grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
    grub-mkconfig -o /boot/grub/grub.cfg
}
EOF
    chmod +x /mnt/chroot_install.sh
    arch-chroot /mnt /chroot_install.sh
}

clean_up() {
    case $AUR_WRAPPER in
        'yay') rm -rf /mnt/tmp/* && rm -rf /mnt/install_yay.sh ;;
        'paru') rm -rf /mnt/tmp/* && rm -rf /mnt/install_paru.sh ;;
        'none') rm -rf /mnt/tmp/* ;;
    esac 
}

SUCCESSFUL_FINISH() {
    if dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "Installation Successful!" \
    --yesno "\nWould you like to reboot?" 0 0;
    then
        reboot_timer
    else
        prompt_argument=2
        main
    fi
}

reboot_timer() {
    for i in {5..1}; do
        clear
        reboot_prompt="The system will restart in ${i}"
        reboot_prompt+="\n\nPress Ctrl+C to cancel"
        echo -e "${reboot_prompt}"
        sleep 1
    done
    umount -R /mnt
    reboot now --no-wall
}

main
